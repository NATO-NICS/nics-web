#
# Copyright (c) 2008-2021, Massachusetts Institute of Technology (MIT)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

endpoint.rest=http://localhost:8080/em-api/v1

endpoint.geoserver=http://localhost:8080/geoserver

endpoint.upload=http://localhost:8080/static/upload

endpoint.symbology=upload/symbology

private.cookie.domain=<domain>

iplanet.key=<key>
iplanet.path=<path>
iplanet.domain=<domain>

openam.key=<cookie>
openam.path=<path>
openam.domain=<domain>

private.google.recaptcha.key=<key>
private.google.recaptcha.secret=<secret>

rabbitmq.hostname=localhost
rabbitmq.username=guest
rabbitmq.userpwd=guest
rabbitmq.exchange.name=amq.topic

feedback.topic=iweb.nics.alert.email
user.enabled.email.from=<recipients>
user.enabled.email.subject=<subject>
user.enabled.email.body=<html><body><p></p></body></html>
# comma separated list of email addresses
feedback.email.to=<addresses>
feedback.email.subject=<subject>


# In minutes
token.timeout=720

# Report properties. Storage isn't really used on the web side, so will factor out at some point
report.general.storage=<path>
report.general.url=<path>

report.uxo.storage=<path>
report.uxo.url=<path>

report.damage.storage=<path>
report.damage.url=<url>

maps.bing.apikey=<key>

main.site.title=<title>
main.site.label=<label>
main.site.logo=<logo>
help.site.url=<url>
registration.help.info=<info>

# password.requirements
#
# The text displayed under "Password Requirements" on the registration page. Must explain
# in user friendly terms the requirements of the password that the password.pattern matches
#
# NOTE: Due to the Config package having multi-value properties enabled, you have to
# escape any commas with a \
#
# Default: Your password must be a minimum 8 characters long and a maximum of 20 with at least one digit\, one upper case letter\, one lower case letter and one special symbol: @#$%-_!
#
password.requirements=Your password must be a minimum 8 characters long and a maximum of 20 with at least one digit\, one upper case letter\, one lower case letter and one special symbol: @#$%-_!

# password.pattern
#
# The password pattern for client-side password validation. This needs to match
# the pattern the em-api uses. It also must be just as strict as OpenAM's.
#
# NOTE: Due to the Config package having multi-value properties enabled, you have to
# escape any commas with a \
#
# Default: ((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%!_-]).{8\,20})
#
password.pattern=((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%!_-]).{8\,20})

#
# The base topic for broadcast alerts. The API will append the userid
# for sending an alert to a specific user. This basetopic + userid will be
# the topic clients will be listening on.
#
broadcastalerts.basetopic=iweb.NICS.broadcastalerts.user.

# Whether to log request/response IDs and messages for debugging
logging.request=true

# Whether or not to prepend the prefix.content string to logged messages
# Default: false
logging.prefix.use=true

# Whether or not to prepend a UTC timestamp to logged messages
# Default: false
logging.prefix.timestamp=true

# The content to prepend to all logged messages
# Default: "IWEB -"
# NOTE: trailing whitespace isn't included, so a space is always
#       added by the client code
logging.prefix.content=NICS -

# trace, debug, info, warn, error, silent
logging.level=info

# Whether or not to log to remote logging endpoint
logging.remote=true

# Whether or not to register error event handler
# with the logger module's error handling that allows
# for publishing errors to the logger endpoint on the API
# Default: false
logging.onerror=true

# Whether to publish caught Errors to log endpoint. Note, only
# works if 'logging.onerror' property is set to true
# Default: false
logging.publisherrors=true

# Logging level used by atmosphere
atmosphere.logging.level=info
translation.directory=<directory>

nics.track.interval.layer=<layer>
nics.track.date.layer=<layer>
nics.track.team.layer=<layer>
nics.track.datasourceid=<datasourceid>
nics.track.datalayer.icon.url=<url>

document.org.directory=/upload/documents/org/
document.incident.directory=/upload/documents/incident/
document.collabroom.directory=/upload/documents/collabroom/
